{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "SpiderLambdaMemorySize": {
            "AllowedValues": [
                128,
                192,
                256,
                320,
                384,
                448,
                512,
                576,
                640,
                704,
                768,
                832,
                896,
                960,
                1024,
                1088,
                1152,
                1216,
                1280,
                1344,
                1408,
                1472,
                1536,
                1600,
                1664,
                1728,
                1792,
                1856,
                1920,
                1984,
                2048,
                2112,
                2176,
                2240,
                2304,
                2368,
                2432,
                2496,
                2560,
                2624,
                2688,
                2752,
                2816,
                2880,
                2944,
                3008
            ],
            "Default": "128",
            "Description": "Amount of memory to allocate to the Lambda Function",
            "Type": "Number"
        },
        "SpiderLambdaTimeout": {
            "Default": "60",
            "Description": "Timeout in seconds for the Lambda function",
            "Type": "Number"
        }
    },
    "Resources": {
        "AllowSNSPutMessagesInSQS": {
            "DependsOn": [
                "SpiderTasksQueue"
            ],
            "Properties": {
                "PolicyDocument": {
                    "Id": "AllowSNSPutMessagesInSQS",
                    "Statement": [
                        {
                            "Action": [
                                "sqs:SendMessage"
                            ],
                            "Effect": "Allow",
                            "Principal": "*",
                            "Resource": [
                                "*"
                            ],
                            "Sid": "AllowSNSPutMessagesInSQS2"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Queues": [
                    {
                        "Ref": "SpiderTasksQueue"
                    }
                ]
            },
            "Type": "AWS::SQS::QueuePolicy"
        },
        "ResultsBucket": {
            "Properties": {
                "BucketName": "pilot-results-bucket"
            },
            "Type": "AWS::S3::Bucket"
        },
        "SNSSource": {
            "DependsOn": [
                "SpiderTasksQueue"
            ],
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "SpiderTasksQueue",
                                "Arn"
                            ]
                        },
                        "Protocol": "sqs"
                    }
                ],
                "TopicName": "pilot-source-sns-topic"
            },
            "Type": "AWS::SNS::Topic"
        },
        "SourceBucket": {
            "DependsOn": [
                "SourceForwardingTopicPolicy"
            ],
            "Properties": {
                "BucketName": "pilot-source-bucket",
                "NotificationConfiguration": {
                    "TopicConfigurations": [
                        {
                            "Event": "s3:ObjectCreated:*",
                            "Topic": {
                                "Ref": "SNSSource"
                            }
                        }
                    ]
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "SourceForwardingTopicPolicy": {
            "Properties": {
                "PolicyDocument": {
                    "Id": "AllowS3PutMessageInSNS",
                    "Statement": [
                        {
                            "Action": [
                                "sns:Publish"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "s3.amazonaws.com"
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "AllowS3PutMessages"
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Topics": [
                    {
                        "Ref": "SNSSource"
                    }
                ]
            },
            "Type": "AWS::SNS::TopicPolicy"
        },
        "SpiderLambda": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "'use strict';",
                                "",
                                "const chromium = require('chrome-aws-lambda');",
                                "const puppeteer = require('puppeteer-core');",
                                "",
                                "const validateCommand = (commandArguments) => {",
                                "  const commandType = commandArguments.shift();",
                                "",
                                "  return commandType === 'click' && commandArguments.length >= 1",
                                "    || commandType === 'type' && commandArguments.length >= 2",
                                "    || commandType === 'screenshot' && commandArguments.length >= 0",
                                "    || commandType === 'goto' && commandArguments.length >= 1",
                                "    || commandType === 'pdf' && commandArguments.length >= 0",
                                "    || commandType === 'textContent' && commandArguments.length >= 1",
                                "    || commandType === 'attribute' && commandArguments.length >= 1",
                                "    || commandType === 'href' && commandArguments.length >= 1;",
                                "};",
                                "",
                                "const parseCommand = async (page, command) => {",
                                "  const parsedCommand = command.split(' ');",
                                "",
                                "  if (validateCommand(parsedCommand.slice())) {",
                                "    const commandType = parsedCommand.shift();",
                                "",
                                "    await commands[commandType](page, parsedCommand);",
                                "  }",
                                "};",
                                "",
                                "const commands = {",
                                "  click,",
                                "  type,",
                                "  screenshot,",
                                "  goto,",
                                "  pdf,",
                                "  textContent,",
                                "  attribute,",
                                "  href,",
                                "};",
                                "",
                                "const click = async (page, commandArguments) =>",
                                "  await page.click(commandArguments[0]);",
                                "",
                                "const type = async (page, commandArguments) =>",
                                "  await page.type(commandArguments[0], commandArguments[1]);",
                                "",
                                "const screenshot = async (page, commandArguments) =>",
                                "  await page.screenshot({fullPage: true, encode: 'base64'});",
                                "",
                                "const goto = async (page, commandArguments) =>",
                                "  await page.goto(commandArguments[0]);",
                                "",
                                "const pdf = async (page, commandArguments) =>",
                                "  await page.pdf();",
                                "",
                                "const textContent = async (page, commandArguments) =>",
                                "  await page.evaluate((selector) =>",
                                "    document.querySelector(selector)",
                                "    && document.querySelector(selector).textContent",
                                "    && document.querySelector(selector).textContent.trim()",
                                "    , commandArguments[0]);",
                                "",
                                "const attribute = async (page, commandArguments) =>",
                                "  await page.evaluate((selector, attribute) =>",
                                "    document.querySelector(selector)",
                                "    && document.querySelector(selector).getAttribute(attribute)",
                                "    && document.querySelector(selector).getAttribute(attribute).trim()",
                                "    , commandArguments[0], commandArguments[1]);",
                                "",
                                "const href = async (page, commandArguments) =>",
                                "  await page.evaluate((selector) =>",
                                "    document.querySelector(selector)",
                                "    && document.querySelector(selector).href",
                                "    && document.querySelector(selector).href.trim()",
                                "    , commandArguments[0]);",
                                "",
                                "",
                                "exports.handler = async (event) => {",
                                "  // const executablePath = event.isOffline",
                                "  //   ? './node_modules/puppeteer/.local-chromium/mac-674921/chrome-mac/Chromium.app/Contents/MacOS/Chromium'",
                                "  //   : await chromium.executablePath;",
                                "  //",
                                "  // const browser = await puppeteer.launch({",
                                "  //   args: chromium.args,",
                                "  //   executablePath",
                                "  // });",
                                "  //",
                                "  // const page = await browser.newPage();",
                                "  //",
                                "",
                                "  console.log(event);",
                                "};",
                                ""
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "MemorySize": {
                    "Ref": "SpiderLambdaMemorySize"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "SpiderLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": {
                    "Ref": "SpiderLambdaTimeout"
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "SpiderLambdaRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "root"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "SpiderTasksDLQ": {
            "Properties": {
                "MessageRetentionPeriod": 1209600,
                "QueueName": "pilot-spider-tasks-dlq"
            },
            "Type": "AWS::SQS::Queue"
        },
        "SpiderTasksQueue": {
            "DependsOn": [
                "SpiderTasksDLQ"
            ],
            "Properties": {
                "MessageRetentionPeriod": 1209600,
                "QueueName": "pilot-spider-tasks",
                "RedrivePolicy": {
                    "deadLetterTargetArn": {
                        "Fn::GetAtt": [
                            "SpiderTasksDLQ",
                            "Arn"
                        ]
                    },
                    "maxReceiveCount": 2
                },
                "VisibilityTimeout": 300
            },
            "Type": "AWS::SQS::Queue"
        }
    }
}
